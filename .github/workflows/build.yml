name: Build and Release  

on:  
  push:  
    tags:  
      - 'v*.*.*'  # Trigger on tags in this format (e.g., v1.0.0)  
  workflow_dispatch:  # Allows manual triggering of the workflow  

jobs:  
  build-and-release:  
    runs-on: ubuntu-latest  

    strategy:  
      matrix:  
        os: [ubuntu-latest, windows-latest]  
        arch: [x86, x64]  

    steps:  
    - name: Check out Git repository  
      uses: actions/checkout@v3  

    - name: Set up Python environment  
      uses: actions/setup-python@v4  
      with:  
        python-version: '3.x'  

    - name: Set up the build environment  
      run: |  
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then  
          sudo apt-get update  
          sudo apt-get install -y build-essential  
          if [ "${{ matrix.arch }}" == "x86" ]; then  
            sudo apt-get install -y gcc-multilib  
            export CFLAGS=-m32  
            export LDFLAGS=-m32  
          fi  
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then  
          choco install mingw  
          if [ "${{ matrix.arch }}" == "x86" ]; then  
            echo "Setting up Windows x86 environment"  
          fi  
        fi  
      shell: bash  

    - name: Build project  
      run: |  
        echo "Starting build for ${{ matrix.os }} ${ matrix.arch }}"  
        ./autogen.sh  
        ./configure  
        make  

    - name: Create release assets  
      run: |  
        mkdir -p release/${{ matrix.os }}-${{ matrix.arch }}  
        cp nbtscan* release/${{ matrix.os }}-${{ matrix.arch }}  

    - name: Upload Release Assets  
      uses: actions/upload-artifact@v3  
      with:  
        name: nbtscan-${{ matrix.os }}-${{ matrix.arch }}  
        path: release/${{ matrix.os }}-${{ matrix.arch }}  

  create-release:  
    needs: build-and-release  
    runs-on: ubuntu-latest  
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')  

    steps:  
    - name: Check out Git repository  
      uses: actions/checkout@v3  

    - name: Download build artifacts  
      uses: actions/download-artifact@v3  
      with:  
        name: nbtscan-ubuntu-latest-x86  
        path: ./release  
    - uses: actions/download-artifact@v3  
      with:  
        name: nbtscan-ubuntu-latest-x64  
        path: ./release  
    - uses: actions/download-artifact@v3  
      with:  
        name: nbtscan-windows-latest-x86  
        path: ./release  
    - uses: actions/download-artifact@v3  
      with:  
        name: nbtscan-windows-latest-x64  
        path: ./release  

    - name: Create GitHub Release  
      uses: softprops/action-gh-release@v1  
      with:  
        files: ./release/**  
      env:  
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
